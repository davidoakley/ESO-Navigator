---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by david.
--- DateTime: 24/02/2025 07:29
---

local Nav = Navigator


--- @class ViewManager
--- @field views table Map of Views, keyed on their id
local ViewManager = Nav.ViewManager or {
    views = {},
    menuList = {}
}

--- @usage Add a View to the ViewManager, but don't add it to the Views menu
--- @param view View The view to add
function ViewManager:Add(view)
    self.views[view.id] = view
    --table.insert(self.list, view)
end

--- @usage Add a View to the ViewManager and the Views menu
--- @param view View The view to add
function ViewManager:AddToMenu(view)
    self.views[view.id] = view
    table.insert(self.menuList, view)
end

--- @usage Get the list of Views to display in the Views menu
--- @return table List of Views
function ViewManager:GetMenuViews()
    return self.menuList
end

--- @usage Run and return the appropriate View's Build method, optionally filtering by a search term
--- @param searchString string|nil The current string to filter by
--- @param viewId string|nil The current View's id
--- @param zone Node The zone object for the current map
---
function ViewManager:Build(searchString, viewId, zone)
    local isSearching = (searchString and searchString ~= "")

    local view

    if viewId and self.views[viewId] then
        view = self.views[viewId]:New()
    elseif isSearching then
        view = self.views["search"]:New()
    elseif zone then
        if zone.zoneId == Nav.ZONE_TAMRIEL then
            view = self.views["tamriel"]:New()
        elseif zone.zoneId == Nav.ZONE_CYRODIIL then
            view = self.views["cyrodiil"]:New()
        else
            view = self.views["zone"]:New(zone)
        end
    else
        view = self.views["standard"]:New()
    end

    if not view then
        view = self.views["tamriel"]:New()
        Nav.logWarning("View:Build: no content chosen")
    end

    local categoryList = view:Build(isSearching)

    if isSearching then
        Nav.Search:FilterView(categoryList, searchString)
    end

    if not isSearching then
        for c = 1, #categoryList do
            if categoryList[c].sort then
                --local comparison = (not isSearching) and categoryList[c].sort or Nav.Utils.WeightComparison
                table.sort(categoryList[c].list, categoryList[c].sort)
            end
        end
    end

    return categoryList
end


---@class Category
local Category = {}

function Category:New(o)
    o = o or {
        id = "",
        title = "",
        list = {},
        emptyHint = nil,
        maxEntries = nil,
        sort = nil
    }
    setmetatable(o, self)
    self.__index = self
    return o
end


--- @class View
local View = {}

function View:New(o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    return o
end

function View:IsAvailable() return true end

function View:AddGroupCategory(categoryList)
    local group = Nav.Players:GetGroupList()
    if #group > 0 then
        table.insert(categoryList, {
            id = "group",
            title = SI_MAIN_MENU_GROUP,
            list = group,
            sort = Nav.Players.GroupComparison
        })
    end
end

function View:AddBookmarksCategory(categoryList)
    table.insert(categoryList, {
        id = "bookmarks",
        title = NAVIGATOR_CATEGORY_BOOKMARKS,
        list = Nav.Bookmarks:getBookmarks(),
        emptyHint = NAVIGATOR_HINT_NOBOOKMARKS
    })
end

function View:AddRecentsCategory(categoryList)
    local recentCount = Nav.saved.recentsCount
    if recentCount > 0 then
        table.insert(categoryList, {
            id = "recents",
            title = NAVIGATOR_CATEGORY_RECENT,
            list = Nav.Recents:getRecents(),
            emptyHint = NAVIGATOR_HINT_NORECENTS,
            maxEntries = recentCount
        })
    end
end

function View:AddZoneCategory(categoryList, zone)
    local list = Nav.Locations:GetNodeList(zone.zoneId, false, Nav.saved.listPOIs)
    table.sort(list, Nav.Node.WeightComparison)

    if Nav.jumpState == Nav.JUMPSTATE_WORLD and zone.zoneId ~= Nav.ZONE_CYRODIIL and
       zone.zoneId ~= Nav.ZONE_IMPERIALCITY and zone.zoneId ~= Nav.ZONE_IMPERIALSEWERS then
        local node = Nav.JumpToZoneNode:New(Nav.Utils.shallowCopy(zone))
        local playerInfo = Nav.Players:GetPlayerInZone(zone.zoneId)
        node.known = playerInfo ~= nil
        table.insert(list, 1, node)
    end

    local title = zone.name
    local tagString = zone:CreateTagListString(false, false)
    if tagString then
        title = title .. "  " .. tagString
    end

    table.insert(categoryList, {
        id = "zone",
        title = title,
        list = list
    })
end

function View:AddCyrodiilCategories(categoryList)
    local list = Nav.Locations:GetNodeList(Nav.ZONE_CYRODIIL, false, Nav.saved.listPOIs)
    local zone = Nav.Locations.zones[Nav.ZONE_CYRODIIL]

    local allianceNodes = {}
    allianceNodes[ALLIANCE_ALDMERI_DOMINION] = {}
    allianceNodes[ALLIANCE_DAGGERFALL_COVENANT] = {}
    allianceNodes[ALLIANCE_EBONHEART_PACT] = {}
    local poiNodes = {}

    for i = 1, #list do
        local node = list[i]
        if node.alliance and allianceNodes[node.alliance] and
           (not node.icon:find("borderKeep") or node.alliance == Nav.currentAlliance) then
            table.insert(allianceNodes[node.alliance], node)
        elseif node.alliance and not node.icon:find("borderKeep") then
            table.insert(poiNodes, node)
        end
    end

    for _, poiNode in pairs(zone.pois) do
        table.insert(poiNodes, poiNode)
    end

    local pa = Nav.currentAlliance
    local allianceList =
            (pa == ALLIANCE_ALDMERI_DOMINION and { ALLIANCE_ALDMERI_DOMINION, ALLIANCE_DAGGERFALL_COVENANT, ALLIANCE_EBONHEART_PACT }) or
            (pa == ALLIANCE_DAGGERFALL_COVENANT and { ALLIANCE_DAGGERFALL_COVENANT, ALLIANCE_EBONHEART_PACT, ALLIANCE_ALDMERI_DOMINION }) or
            (pa == ALLIANCE_EBONHEART_PACT and { ALLIANCE_EBONHEART_PACT, ALLIANCE_ALDMERI_DOMINION, ALLIANCE_DAGGERFALL_COVENANT })

    for i = 1, #allianceList do
        local alliance = allianceList[i]
        table.sort(allianceNodes[alliance], Nav.Node.WeightComparison)
        table.insert(categoryList, {
            id = string.format("alliance_%d", alliance),
            title = Nav.Utils.FormatSimpleName(GetAllianceName(alliance)),
            list = allianceNodes[alliance]
        })
    end

    table.sort(poiNodes, Nav.Node.WeightComparison)
    table.insert(categoryList, {
        id = "pois",
        title = NAVIGATOR_CATEGORY_POI,
        list = poiNodes
    })
end


--- @class StandardView
local StandardView = View:New({ id = "standard" })

function StandardView:New()
    local o = {}
    setmetatable(o, self)
    self.__index = self
    return o
end

function StandardView:Build()
    local categoryList = {}

    self:AddGroupCategory(categoryList)
    self:AddBookmarksCategory(categoryList)
    self:AddRecentsCategory(categoryList)

    return categoryList
end

ViewManager:Add(StandardView:New())

--- @class ZoneView
local ZoneView = View:New({ id = "zone" })

function ZoneView:New(zone)
    local o = {
        id = ZoneView.id,
        zone = zone
    }
    setmetatable(o, self)
    self.__index = self
    return o
end

function ZoneView:Build()
    local categoryList = {}

    self:AddGroupCategory(categoryList)
    self:AddBookmarksCategory(categoryList)
    self:AddRecentsCategory(categoryList)
    self:AddZoneCategory(categoryList, self.zone)

    return categoryList
end

ViewManager:Add(ZoneView:New())


--- @class CyrodiilView
local CyrodiilView = View:New({ id = "cyrodiil" })

function CyrodiilView:Build()
    local categoryList = {}

    self:AddGroupCategory(categoryList)

    if Nav.jumpState == Nav.JUMPSTATE_WORLD or Nav.jumpState == Nav.JUMPSTATE_WAYSHRINE then
        self:AddBookmarksCategory(categoryList)
        self:AddRecentsCategory(categoryList)
    end

    self:AddCyrodiilCategories(categoryList)

    return categoryList
end

ViewManager:Add(CyrodiilView:New())


---@class SearchView
local SearchView = View:New({ id = "search" })

function SearchView:New(showHidden)
    local o = { showHidden = showHidden }
    setmetatable(o, self)
    self.__index = self
    return o
end

function SearchView:Build()
    local categoryList = {}

    local list = Nav.Locations:GetNodeList(nil, true)
    Nav.Utils.tableConcat(list, Nav.Locations:GetZoneList(true))

    --table.sort(list, Nav.Node.WeightComparison)

    table.insert(categoryList, {
        id = "results",
        title = NAVIGATOR_CATEGORY_RESULTS,
        list = list
    })

    return categoryList
end

ViewManager:Add(SearchView:New())


-- == VIEWS MENU == --

--- @class TamrielView
local TamrielView = View:New({ id = "tamriel" })

function TamrielView:AddZoneListCategory(categoryList)
    local list = Nav.Locations:GetZoneList()
    table.sort(list, Nav.Utils.NameComparison)

    table.insert(categoryList, {
        id = "zones",
        title = NAVIGATOR_CATEGORY_ZONES,
        list = list
    })
end

function TamrielView:Build()
    local categoryList = {}

    self:AddGroupCategory(categoryList)
    self:AddBookmarksCategory(categoryList)
    self:AddRecentsCategory(categoryList)
    self:AddZoneListCategory(categoryList)

    return categoryList
end

ViewManager:Add(TamrielView:New())


-- == VIEWS MENU VIEWS == --

---@class ZonesView
local ZonesView = View:New({
    id = "zones",
    title = NAVIGATOR_SETTINGS_ZONE_ACTIONS_NAME,
    icon = "Navigator/media/icons/zone.dds"
})

function ZonesView:Build()
    local categoryList = {}

    local list = Nav.Locations:GetZoneList()

    table.insert(categoryList, {
        id = "zones",
        title = NAVIGATOR_SETTINGS_ZONE_ACTIONS_NAME,
        list = list,
        sort = Nav.Node.NameComparison
    })

    return categoryList
end

ViewManager:AddToMenu(ZonesView:New())


---@class PlayersView
local PlayersView = View:New({
    id = "players",
    title = NAVIGATOR_MENU_PLAYERS,
    icon = "Navigator/media/icons/player.dds"
})

function PlayersView:Build()
    local categoryList = {}
    local list = Nav.Players:GetPlayerList(false)

    table.insert(categoryList, {
        id = "players",
        title = NAVIGATOR_MENU_PLAYERS,
        list = list,
        sort = Nav.Node.WeightComparison
    })

    return categoryList
end

ViewManager:AddToMenu(PlayersView:New())


---@class HousesView
local HousesView = View:New({
    id = "houses",
    title = NAVIGATOR_SETTINGS_HOUSE_ACTIONS_NAME,
    icon = "Navigator/media/icons/house.dds"
})

function HousesView:Build(isSearching)
    local categoryList = {}

    local list = Nav.Locations:GetHouseList(isSearching)
    local owned = Nav.Utils.GetFilteredArray(list, function(h) return h.owned end)
    local unowned = Nav.Utils.GetFilteredArray(list, function(h) return not h.owned end)

    table.insert(categoryList, {
        id = "houses",
        title = GetString("SI_COLLECTIBLEUNLOCKSTATE", COLLECTIBLE_UNLOCK_STATE_UNLOCKED_OWNED), --NAVIGATOR_SETTINGS_HOUSE_ACTIONS_NAME,
        list = owned,
        sort = Nav.Node.WeightComparison
    })

    table.insert(categoryList, {
        id = "houses",
        title = GetString("SI_COLLECTIBLEUNLOCKSTATE", COLLECTIBLE_UNLOCK_STATE_LOCKED), --NAVIGATOR_SETTINGS_HOUSE_ACTIONS_NAME,
        list = unowned,
        sort = Nav.Node.WeightComparison
    })

    return categoryList
end

ViewManager:AddToMenu(HousesView:New())


---@class GuildTradersView
local GuildTradersView = View:New({
    id = "guildTraders",
    title = NAVIGATOR_MENU_GUILDTRADERS,
    icon = "Navigator/media/icons/trader.dds"
})

function GuildTradersView:Build()
    local categoryList = {}

    local list = Nav.Locations:GetTraderNodeList()

    table.insert(categoryList, {
        id = "traders",
        title = NAVIGATOR_MENU_GUILDTRADERS,
        list = list,
        sort = Nav.Node.TradersComparison
    })

    return categoryList
end

ViewManager:AddToMenu(GuildTradersView:New())


---@class TreasureMapsView
local TreasureMapsView = View:New({
    id = "treasureMaps",
    title = NAVIGATOR_MENU_TREASUREMAPS_SURVEYS,
    icon = "Navigator/media/icons/map.dds"
})

function TreasureMapsView:Build()
    local categoryList = {}

    local list = Nav.Locations:GetMapZones()

    table.insert(categoryList, {
        id = "treasureMaps",
        title = NAVIGATOR_MENU_TREASUREMAPS_SURVEYS,
        list = list,
        sort = Nav.Node.NameComparison
    })

    return categoryList
end

function TreasureMapsView:IsAvailable()
    return LibTreasure_GetItemIdData ~= nil
end

ViewManager:AddToMenu(TreasureMapsView:New())


-- ---@class ContentBuilder
--local ContentBuilder = {}
--
--function ContentBuilder.Build(searchString, viewId)
--    --local results = Nav.Search:Run(searchString or "", view)
--    --local isSearching = #results > 0 or (searchString and searchString ~= "") or
--    --        (view ~= Nav.VIEW_NONE and view == Nav.VIEW_ALL)
--    local isSearching = (searchString and searchString ~= "")
--
--    local view
--
--    if viewId == Nav.VIEW_HOUSES then
--        view = HousesView:New()
--    elseif viewId == Nav.VIEW_PLAYERS then
--        view = PlayersView:New()
--    elseif viewId == Nav.VIEW_ZONES then
--        view = ZonesView:New()
--    elseif viewId == Nav.VIEW_TRADERS then
--        view = GuildTradersView:New()
--    elseif viewId == Nav.VIEW_TREASURE then
--        view = MapsView:New()
--    elseif isSearching then
--        view = SearchView:New()
--    else
--        local zone = Nav.Locations:getCurrentMapZone()
--        if zone then
--            if zone.zoneId == Nav.ZONE_TAMRIEL then
--                view = TamrielView:New()
--            elseif zone.zoneId == Nav.ZONE_CYRODIIL then
--                view = CyrodiilView:New()
--            else
--                view = ZoneView:New(zone)
--            end
--        else
--            view = StandardView:New()
--        end
--    end
--
--    if not view then
--        view = TamrielView:New()
--        Nav.logWarning("View:Build: no content chosen")
--    end
--    view:Compose(isSearching)
--
--    if isSearching then
--        Nav.Search:FilterView(view, searchString)
--    end
--
--    if not isSearching then
--        for c = 1, #view.categories do
--            if view.categories[c].sort then
--                --local comparison = (not isSearching) and content.categories[c].sort or Nav.Utils.WeightComparison
--                table.sort(view.categories[c].list, view.categories[c].sort)
--            end
--        end
--    end
--
--    return view
--end


Nav.ViewManager = ViewManager
Nav.Category = Category
--Nav.ContentBuilder = ContentBuilder
--Nav.StandardView = StandardView
--Nav.ZoneView = ZoneView
--Nav.ZoneListView = TamrielView
--Nav.CyrodiilView = CyrodiilView
