---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by david.
--- DateTime: 27/05/2025 20:21
---

local Nav = Navigator


--- @class Treasure
local Treasure = {}

function Treasure.Load(zones)
    if not LibTreasure_GetItemIdData then -- Check if LibTreasure is available
        return
    end

    local beginTime = GetGameTimeMilliseconds()
    local bag = SHARED_INVENTORY:GetOrCreateBagCache(BAG_BACKPACK)
    local mapIndexMap = {}
    for _, slotData in pairs(bag) do
        local itemId = GetItemId(slotData.bagId, slotData.slotIndex)
        local thatMap = LibTreasure_GetItemIdData(itemId)
        if thatMap ~= nil then
            local mapID = thatMap.mapId
            local _, _, _,zoneIndex, _ = GetMapInfoById(mapID)

            local treasure = mapIndexMap[zoneIndex]
            if not mapIndexMap[zoneIndex] then
                treasure = Treasure:New()
                mapIndexMap[zoneIndex] = treasure
            end

            treasure:Add(slotData, thatMap)
        end
    end

    for _, zone in pairs(zones) do
        zone.treasure = mapIndexMap[zone.zoneIndex]
    end
    Nav.log("Treasure.Load: %dms", GetGameTimeMilliseconds() - beginTime)
end

function Treasure:New(o)
    o = o or { list = {} }
    setmetatable(o, self)
    self.__index = self
    return o
end

local function getSurveyType(texture)
    local i = 1

    for word in string.gmatch(texture, "[^_]+") do
        if i == 3 then
            return word
        end
        i = i + 1
    end
    return nil
end

function Treasure:Add(slotData, thatMap)
    local pinType = thatMap.pinType
    local itemName = Nav.Utils.FormatSimpleName(GetItemName(slotData.bagId, slotData.slotIndex))
    local icon, stackCount, sellPrice, meetsUsageRequirement, locked, equipType, _, functionalQuality, displayQuality = GetItemInfo(slotData.bagId, slotData.slotIndex)
    local surveyType = nil
    if pinType == "survey" then
        itemName = itemName:gsub("Â *:.*[^I%s][^I]*$", "")

        surveyType = getSurveyType(thatMap.texture)
        --for word in string.gmatch(thatMap.texture, "[^_]+") do
        --    surveyType = word  -- Update lastItem with the current word
        --end
    end

    --local category = surveyType or pinType
    --if not self[category] then self[category] = {} end

    --table.insert(self.list, { pinType, itemName, surveyType, stackCount, thatMap })
    table.insert(self.list, { pinType = pinType, name = itemName, surveyType = surveyType, count = stackCount, map = thatMap })
end


function Treasure:GetCount(splitSurveys)
    local result = {}

    for i = 1, #self.list do
        local item = self.list[i]
        local category = splitSurveys and item.surveyType or item.pinType
        result[category] = (result[category] or 0) + 1
    end

    return result
end

function Treasure:GetList()
    local result = {}

    for i = 1, #self.list do
        local item = self.list[i]
        local icon = item.surveyType or item.pinType
        --local text = string.format("|u12:0::|u|t18:24:Navigator/media/tags/%s.dds:inheritcolor|t %s", icon, itemList[i][2])
        table.insert(result, { name = item.name, icon = icon, count = item.count })
    end

    return result
end

Nav.Treasure = Treasure
