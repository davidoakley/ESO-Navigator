---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by david.
--- DateTime: 15/03/2025 21:29
---

local Nav = Navigator

local pingEvent


--- @class Node
local Node = {}

function Node:New(o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    return o
end

function Node:IsHouse() return false end
function Node:IsPOI() return false end

---WeightComparison
---@param x Node
---@param y Node
function Node.WeightComparison(x, y)
    local xWeight = x:GetWeight()
    local yWeight = y:GetWeight()

    if xWeight ~= yWeight then
        return xWeight > yWeight
    end
    return Nav.SortName(x.name) < Nav.SortName(y.name)
end

function Node:IsKnown()
    if self.known == nil then
        if self.nodeIndex then
            local known, _, _, _, _, _, _, _, _ = GetFastTravelNodeInfo(self.nodeIndex)
            self.known = known
        else
            local x, z, iconType, icon, isShownInCurrentMap, linkedCollectibleIsLocked, isDiscovered, isNearby = GetPOIMapInfo(self.zoneIndex, self.poiIndex)
            self.known = isDiscovered
        end
    end
    return self.known
end

function Node:GetWeight()
    return 1.0
end

function Node:AddBookmarkMenuItem(entry)
    if entry and not Nav.Bookmarks:contains(entry) then
        AddMenuItem(GetString(NAVIGATOR_MENU_ADDBOOKMARK), function()
            Nav.Bookmarks:add(entry)
            Nav.MapTab.menuOpen = false
            zo_callLater(function() Nav.MapTab:ImmediateRefresh() end, 10)
        end)
    end
end

function Node:GetName()
    return self.name or ""
end

function Node:GetIcon()
    return self.icon
end

function Node:GetSuffix()
    return self.suffix or ""
end

function Node:GetTagList(showBookmark)
    local tagList = {}
    if showBookmark and Nav.Bookmarks:contains(self) then
        table.insert(tagList, "bookmark")
    end
    return tagList
end

function Node:GetOverlayIcon()
    return nil, nil
end

function Node:GetInteractionName(interaction)
    return interaction == "singleClick" and GetString(NAVIGATOR_SETTINGS_ACTIONS_SINGLE_CLICK)
            or GetString(NAVIGATOR_SETTINGS_ACTIONS_DOUBLE_CLICK)
end

function Node:GetActionDescription(action)
    if action == Nav.ACTION_SHOWONMAP then
        return GetString(NAVIGATOR_MENU_SHOWONMAP)
    elseif action == Nav.ACTION_SETDESTINATION then
        return GetString(NAVIGATOR_MENU_SETDESTINATION)
    elseif action == Nav.ACTION_TRAVEL then
        if Nav.jumpState == Nav.JUMPSTATE_WORLD then
            local s = Nav.Utils.EllipsisString(SI_WORLD_MAP_ACTION_RECALL_TO_WAYSHRINE)
            local recallCost = self.known and self:GetRecallCost() or nil
            if recallCost then
                local currencyType = CURT_MONEY
                local formatType = ZO_CURRENCY_FORMAT_AMOUNT_ICON
                local currencyString = zo_strformat(SI_NUMBER_FORMAT, ZO_Currency_FormatKeyboard(currencyType, recallCost, formatType))
                s = s .. " (" .. currencyString .. ")"
            end
            return s
        else
            return Nav.Utils.EllipsisString(SI_WORLD_MAP_ACTION_TRAVEL_TO_WAYSHRINE)
        end
    elseif action == Nav.ACTION_VISITHOUSE then
        return GetString(SI_SOCIAL_MENU_VISIT_HOUSE)
    else
        Nav.log("Unknown action %d", action or -1)
    end
end

function Node:GetColour(isSelected)
    if isSelected and self.known and not self.disabled then
        return Nav.COLOUR_WHITE
    elseif self.known and not self.disabled then
        return Nav.COLOUR_NORMAL
    else
        return Nav.COLOUR_DISABLED
    end
end

function Node:GetIconColour()
    if self.known and not self.disabled then
        return Nav.COLOUR_WHITE
    else
        return Nav.COLOUR_DISABLED
    end
end

function Node:GetSuffixColour()
    if self.known and not self.disabled then
        return Nav.COLOUR_SUFFIX_NORMAL
    else
        return Nav.COLOUR_SUFFIX_DISABLED
    end
    --return (self.known and not self.disabled) and Nav.COLOUR_SUFFIX_NORMAL or Nav.COLOUR_SUFFIX_DISABLED
end
Node.GetTagColour = Node.GetSuffixColour

function Node:GetRecallCost()
    return nil -- By default, free!
end

function Node:GetMapInfo(self, zoneIndex, mapId)
    if mapId == 2082 then
        return 0.3485, 0.3805 -- The Shambles
    elseif self.nodeIndex == 407 then
        return 0.9273, 0.7105 -- Dragonguard Sanctum
    else
        return GetPOIMapInfo(zoneIndex, self.poiIndex)
    end
end

function Node:ZoomToPOI(setWaypoint, useCurrentZoom)
    local function panToPOI(self, zoneIndex, mapId)
        local normalizedX, normalizedZ = self:GetMapInfo(self, zoneIndex, mapId)
        --Nav.log("Node:ZoomToPOI: poiIndex=%d, %f,%f", self.poiIndex or -1, normalizedX, normalizedZ)
        if setWaypoint then
            PingMap(MAP_PIN_TYPE_PLAYER_WAYPOINT, MAP_TYPE_LOCATION_CENTERED, normalizedX, normalizedZ)
        else
            Node.AddPing(normalizedX, normalizedZ)
        end

        local mapPanAndZoom = ZO_WorldMap_GetPanAndZoom()
        mapPanAndZoom:PanToNormalizedPosition(normalizedX, normalizedZ, useCurrentZoom)
    end

    local targetMapId = self.mapId or Nav.Locations.GetMapIdByZoneId(self.zoneId)
    local currentMapId = GetCurrentMapId()
    local targetZoneIndex = GetZoneIndex(self.zoneId)
    if self.nodeIndex == 407 then -- Dragonguard Sanctum
        targetMapId = 1654
    end

    if targetMapId ~= currentMapId then
        WORLD_MAP_MANAGER:SetMapById(targetMapId)

        zo_callLater(function()
            panToPOI(self, targetZoneIndex, targetMapId)
        end, 100)
    else
        panToPOI(self, targetZoneIndex, targetMapId)
    end
end

function Node.AddPing(x, y)
    Node.RemovePings()
    local pinMgr = ZO_WorldMap_GetPinManager()
    pinMgr:CreatePin(MAP_PIN_TYPE_AUTO_MAP_NAVIGATION_PING, "pings", x, y)
    pingEvent = zo_callLater(function()
        Node.RemovePings()
        pingEvent = nil
    end, 2800)
end

function Node.RemovePings()
    if pingEvent then
        zo_removeCallLater(pingEvent)
        pingEvent = nil
        ZO_WorldMap_GetPinManager():RemovePins("pings", MAP_PIN_TYPE_AUTO_MAP_NAVIGATION_PING)
    end
end

local singleClickEvent
function Node:OnClick(isDoubleClick)
    local action = self.GetActions()[isDoubleClick and "doubleClick" or "singleClick"]
    if isDoubleClick and singleClickEvent then
        zo_removeCallLater(singleClickEvent)
        singleClickEvent = nil
    end
    if not isDoubleClick and (action == Nav.ACTION_TRAVEL or action == Nav.ACTION_TRAVELOUTSIDE) and
            action ~= self.GetActions().doubleClick then
        singleClickEvent = zo_callLater(function()
            self:DoAction(action)
        end, 400)
    else
        singleClickEvent = nil
        self:DoAction(action)
    end
end

function Node:OnEnter()
    self:DoAction(self:GetActions().enterKey)
end

function Node:OnSlash()
    local action = self:GetActions().slash
    if action == Nav.ACTION_SHOWONMAP or action == Nav.ACTION_SETDESTINATION then
        Nav.showSearch(function() self:DoAction(action) end)
    else
        self:DoAction(action)
    end
end

function Node:GetActions()
    return {}
end

function Node:DoAction(action)
    if action == Nav.ACTION_SHOWONMAP then
        self:ZoomToPOI(false)
    elseif action == Nav.ACTION_SETDESTINATION then
        self:ZoomToPOI(true)
    elseif action == Nav.ACTION_TRAVEL then
        self:Jump()
    end
end

Nav.Node = Node
