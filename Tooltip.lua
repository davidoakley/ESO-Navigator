---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by david.
--- DateTime: 16/03/2025 15:21

local Nav = Navigator

local Tooltip = {}

function Tooltip:New(node, control)
    local o = {node = node, control = control}
    setmetatable(o, self)
    self.__index = self

    o.tooltip = InformationTooltip
    InitializeTooltip(o.tooltip, control, TOPRIGHT, 0, -2, TOPLEFT)

    o.tooltip:AddLine(zo_strformat(SI_WORLD_MAP_LOCATION_NAME, node.name), "ZoFontWinH3", ZO_TOOLTIP_DEFAULT_COLOR:UnpackRGB())
    ZO_Tooltip_AddDivider(o.tooltip)

    if node.keepId then
        o:AddKeepInfo()
    elseif not node.known and not node.houseId then
        o.tooltip:AddLine(GetString(NAVIGATOR_NOT_KNOWN), "", ZO_DISABLED_TEXT:UnpackRGB())
    end

    if node.nodeIndex and not node.houseId then
        o:AddFastTravelNodeInfo()
    elseif node.poiIndex then
        o:AddPOIInfo()
    end

    o:AddActions()

    return o
end

function Tooltip:AddPOIInfo()
    local hasContent = false
    local skyshardId = GetPOISkyshardId(self.node.zoneIndex, self.node.poiIndex)
    if skyshardId ~= 0 then
        local hintText = GetSkyshardHint(skyshardId)
        self.tooltip:AddLine(zo_strformat(SI_WORLD_MAP_SKYSHARD_HINT_FORMATTER, hintText), "", ZO_TOOLTIP_DEFAULT_COLOR:UnpackRGB())

        local skyshardDiscoveryStatus = GetSkyshardDiscoveryStatus(skyshardId)
        self.tooltip:AddLine(zo_strformat(SI_WORLD_MAP_SKYSHARD_STATUS_FORMATTER, GetString("SI_SKYSHARDDISCOVERYSTATUS", skyshardDiscoveryStatus)), "", ZO_TOOLTIP_DEFAULT_COLOR:UnpackRGB())
        hasContent = true
    end

    local _, _, poiStartDesc, poiFinishedDesc = GetPOIInfo(self.node.zoneIndex, self.node.poiIndex)

    if self.node.pinType == MAP_PIN_TYPE_POI_COMPLETE and poiFinishedDesc and poiFinishedDesc ~= "" then
        self.tooltip:AddLine(poiFinishedDesc, "", ZO_TOOLTIP_DEFAULT_COLOR:UnpackRGB())
        hasContent = true
    elseif poiStartDesc and poiStartDesc ~= "" then
        self.tooltip:AddLine(poiStartDesc, "", ZO_TOOLTIP_DEFAULT_COLOR:UnpackRGB())
        hasContent = true
    end
    if hasContent then ZO_Tooltip_AddDivider(self.tooltip) end
end

function Tooltip:AddFastTravelNodeInfo()
    local hasContent = false
    -- Converted from ESOUI: InformationTooltipMixin:AppendWayshrineTooltip(pin)
    local nodeIndex = self.node.nodeIndex

    if self.node.traders and self.node.traders > 0 then
        self.tooltip:AddLine(zo_strformat(GetString(NAVIGATOR_TOOLTIP_GUILDTRADERS), self.node.traders), "", ZO_NORMAL_TEXT:UnpackRGB())
        hasContent = true
    end

    local isOutboundOnly, outboundOnlyErrorStringId = GetFastTravelNodeOutboundOnlyInfo(nodeIndex)
    if Nav.currentNodeIndex == nodeIndex then --NO CLICK: Can't travel to origin
        self.tooltip:AddLine(GetString(SI_TOOLTIP_WAYSHRINE_CURRENT_LOC), "", ZO_HIGHLIGHT_TEXT:UnpackRGB())
        hasContent = true
    elseif Nav.currentNodeIndex == nil and IsInCampaign() then --NO CLICK: Can't recall while inside AvA zone
        self.tooltip:AddLine(GetString(SI_TOOLTIP_WAYSHRINE_CANT_RECALL_AVA), "", ZO_ERROR_COLOR:UnpackRGB())
        hasContent = true
    elseif isOutboundOnly then --NO CLICK: Can't travel to this wayshrine, only from it
        local message = GetErrorString(outboundOnlyErrorStringId)
        self.tooltip:AddLine(message, "", ZO_ERROR_COLOR:UnpackRGB())
        hasContent = true
    elseif not CanLeaveCurrentLocationViaTeleport() then --NO CLICK: Current Zone or Subzone restricts jumping
        local cantLeaveStringId
        if IsInOutlawZone() then
            cantLeaveStringId = SI_TOOLTIP_WAYSHRINE_CANT_RECALL_OUTLAW_REFUGE
        else
            cantLeaveStringId = SI_TOOLTIP_WAYSHRINE_CANT_RECALL_FROM_LOCATION
        end
        self.tooltip:AddLine(GetString(cantLeaveStringId), "", ZO_ERROR_COLOR:UnpackRGB())
        hasContent = true
        --elseif pin:IsLockedByLinkedCollectible() then --CLICK: Open the store
        --    local r, g, b = GetInterfaceColor(INTERFACE_COLOR_TYPE_MARKET_COLORS, MARKET_COLORS_ON_SALE)
        --    local SET_TO_FULL_SIZE = true
        --    self.tooltip:AddLine(ZO_WorldMap_GetWayshrineTooltipCollectibleLockedText(pin), "", r, g, b, CENTER, MODIFY_TEXT_TYPE_NONE, TEXT_ALIGN_CENTER, SET_TO_FULL_SIZE)
        --
        --    if pin:GetLinkedCollectibleType() == COLLECTIBLE_CATEGORY_TYPE_CHAPTER then
        --        self.tooltip:AddLine(GetString(SI_TOOLTIP_WAYSHRINE_CLICK_TO_UPGRADE_CHAPTER), "", ZO_HIGHLIGHT_TEXT:UnpackRGB())
        --    else
        --        self.tooltip:AddLine(GetString(SI_TOOLTIP_WAYSHRINE_CLICK_TO_OPEN_CROWN_STORE), "", ZO_HIGHLIGHT_TEXT:UnpackRGB())
        --    end
    elseif IsUnitDead("player") then --NO CLICK: Dead
        self.tooltip:AddLine(GetString(SI_TOOLTIP_WAYSHRINE_CANT_RECALL_WHEN_DEAD), "", ZO_ERROR_COLOR:UnpackRGB())
        hasContent = true
    --else
    --    self:AddTooltipActions(self.tooltip)
    end

    if hasContent then
        ZO_Tooltip_AddDivider(self.tooltip)
    end
end

function Tooltip:AddKeepInfo()
    --local LINE_SPACING = 3
    --local BORDER = 8
    --local MAX_WIDTH = 400
    --local NUM_RESOURCES = 3

    local KEEP_TOOLTIP_NAME = ZO_ColorDef:New(GetInterfaceColor(INTERFACE_COLOR_TYPE_KEEP_TOOLTIP, KEEP_TOOLTIP_COLOR_NAME))
    local KEEP_TOOLTIP_ATTACK_LINE = ZO_ColorDef:New(GetInterfaceColor(INTERFACE_COLOR_TYPE_KEEP_TOOLTIP, KEEP_TOOLTIP_COLOR_ATTACK_LINE))
    --local KEEP_TOOLTIP_NORMAL_LINE = ZO_ColorDef:New(GetInterfaceColor(INTERFACE_COLOR_TYPE_KEEP_TOOLTIP, KEEP_TOOLTIP_COLOR_NORMAL_LINE))
    local KEEP_TOOLTIP_ACCESSIBLE = ZO_ColorDef:New(GetInterfaceColor(INTERFACE_COLOR_TYPE_KEEP_TOOLTIP, KEEP_TOOLTIP_COLOR_ACCESSIBLE))
    local KEEP_TOOLTIP_NOT_ACCESSIBLE = ZO_ColorDef:New(GetInterfaceColor(INTERFACE_COLOR_TYPE_KEEP_TOOLTIP, KEEP_TOOLTIP_COLOR_NOT_ACCESSIBLE))
    local KEEP_TOOLTIP_UNIDIRECTIONALLY_ACCESSIBLE = ZO_ColorDef:New(GetInterfaceColor(INTERFACE_COLOR_TYPE_KEEP_TOOLTIP, KEEP_TOOLTIP_COLOR_UNIDIRECTIONALLY_ACCESSIBLE))
    local KEEP_TOOLTIP_AT_KEEP = ZO_ColorDef:New(GetInterfaceColor(INTERFACE_COLOR_TYPE_KEEP_TOOLTIP, KEEP_TOOLTIP_COLOR_AT_KEEP))
    --local KEEP_TOOLTIP_OWNER = ZO_ColorDef:New(GetInterfaceColor(INTERFACE_COLOR_TYPE_KEEP_TOOLTIP, KEEP_TOOLTIP_COLOR_OWNER))
    local KEEP_TOOLTIP_UNCLAIMED = ZO_ColorDef:New(GetInterfaceColor(INTERFACE_COLOR_TYPE_KEEP_TOOLTIP, KEEP_TOOLTIP_COLOR_UNCLAIMED))

    --local SMALL_KEEP_ICON_STRING = zo_iconFormatInheritColor("EsoUI/Art/AvA/AvA_tooltipIcon_keep.dds", 32, 32)


    local function GetDistrictTelVarBonusText(keepId, battlegroundContext, keepAlliance)
        local telVarBonus = GetDistrictOwnershipTelVarBonusPercent(keepId, battlegroundContext)
        if telVarBonus > 0 then
            local telVarBonusText = zo_strformat(DISTRICT_BONUS_VALUE_FORMAT, telVarBonus)
            local captured = keepAlliance == GetUnitAlliance("player")
            local color = captured and KEEP_TOOLTIP_ACCESSIBLE or KEEP_TOOLTIP_UNCLAIMED
            return color:Colorize(telVarBonusText)
        end
        return nil
    end

    local function GetKeepCaptureBonusText(keepId, battlegroundContext, keepAlliance)
        local pointBonus = GetKeepCaptureBonusPercent(keepId, battlegroundContext)
        if pointBonus > 0 then
            local pointBonusText = zo_strformat(KEEP_CAPTURE_BONUS_VALUE_FORMAT, pointBonus)
            local captured = keepAlliance == GetUnitAlliance("player")
            local color = captured and KEEP_TOOLTIP_ACCESSIBLE or KEEP_TOOLTIP_UNCLAIMED
            return color:Colorize(pointBonusText)
        end
        return nil
    end

    local function GetPassableKeepStatusText(keepId, battlegroundContext, keepType)
        if IsKeepTypePassable(keepType) then
            local directionalAccess = GetKeepDirectionalAccess(keepId, battlegroundContext)
            if directionalAccess == KEEP_PIECE_DIRECTIONAL_ACCESS_BIDIRECTIONAL then
                local statusText = GetString(SI_MAP_KEEP_PASSABLE_STATUS_CAN_PASS)
                return KEEP_TOOLTIP_ACCESSIBLE:Colorize(statusText)
            elseif directionalAccess == KEEP_PIECE_DIRECTIONAL_ACCESS_BLOCKED then
                local statusText = GetString(SI_MAP_KEEP_PASSABLE_STATUS_CANNOT_PASS)
                return KEEP_TOOLTIP_NOT_ACCESSIBLE:Colorize(statusText)
            elseif directionalAccess == KEEP_PIECE_DIRECTIONAL_ACCESS_UNIDIRECTIONAL then
                if keepType == KEEPTYPE_MILEGATE then
                    local statusText = GetString(SI_MAP_KEEP_MILEGATE_UNIDIRECTIONALLY_PASSABLE)
                    return KEEP_TOOLTIP_UNIDIRECTIONALLY_ACCESSIBLE:Colorize(statusText)
                end
            end
        end
    end


    local keepId = self.node.keepId
    local keepName = GetKeepName(keepId)
    if not keepName then
        return
    end

    local battlegroundContext = self.node.bgContext
    local historyPercent = ZO_WorldMap_GetHistoryPercentToUse()

    local keepType = GetKeepType(keepId)
    local alliance = GetHistoricalKeepAlliance(keepId, battlegroundContext, historyPercent)

    if IsKeepTypeCapturable(keepType) then
        local allianceName
        local allianceColor = GetAllianceColor(alliance)
        if(alliance == ALLIANCE_NONE) then
            allianceName = GetString(SI_KEEP_UNCLAIMED)
        else
            allianceName = GetAllianceName(alliance)
        end
        local text = zo_strformat(GetString(SI_TOOLTIP_KEEP_ALLIANCE_OWNER), allianceColor:Colorize(allianceName))
        self.tooltip:AddLine(text, "", ZO_TOOLTIP_DEFAULT_COLOR:UnpackRGB())
    end

    local notHistorical = historyPercent >= 1.0
    if notHistorical then
        --Guild Owner Name
        if IsKeepTypeClaimable(keepType) then
            local guildName = GetClaimedKeepGuildName(keepId, battlegroundContext)
            local color = KEEP_TOOLTIP_NAME
            if(guildName == "") then
                guildName = GetString(SI_KEEP_UNCLAIMED_GUILD)
                color = KEEP_TOOLTIP_UNCLAIMED
            end
            guildName = color:Colorize(guildName)
            local text = zo_strformat(GetString(SI_TOOLTIP_KEEP_GUILD_OWNER), guildName)
            self.tooltip:AddLine(text, "", ZO_TOOLTIP_DEFAULT_COLOR:UnpackRGB())
        end

        -- siege weapons
        if DoesKeepTypeHaveSiegeLimit(keepType) then
            local playerAlliance = GetUnitAlliance("player")
            local playerAllianceName = zo_strformat(SI_MAP_KEEP_INFO_ALLIANCE_TOOLTIP_FORMAT, GetColoredAllianceName(playerAlliance))
            local maxSiegeWeapons = GetMaxKeepSieges(keepId, battlegroundContext)
            -- always show players alliance weapons
            local numPlayerSiegeWeapons = GetNumSieges(keepId, battlegroundContext, playerAlliance)
            local text = zo_strformat(GetString(SI_TOOLTIP_KEEP_SIEGE_WEAPON), playerAllianceName, numPlayerSiegeWeapons, maxSiegeWeapons)
            self.tooltip:AddLine(text, "", ZO_TOOLTIP_DEFAULT_COLOR:UnpackRGB())
            -- show siege weapons for each alliance if non zero
            for i = 1, NUM_ALLIANCES do
                if(i ~= playerAlliance) then
                    local numSiegeWeapons = GetNumSieges(keepId, battlegroundContext, i)
                    if(numSiegeWeapons > 0) then
                        local allianceName = zo_strformat(SI_MAP_KEEP_INFO_ALLIANCE_TOOLTIP_FORMAT, GetColoredAllianceName(i))
                        text = zo_strformat(GetString(SI_TOOLTIP_KEEP_SIEGE_WEAPON), allianceName, numSiegeWeapons, maxSiegeWeapons)
                        self.tooltip:AddLine(text, "", ZO_TOOLTIP_DEFAULT_COLOR:UnpackRGB())
                    end
                end
            end
        end

        --Artifact Info
        if keepType == KEEPTYPE_ARTIFACT_KEEP then
            local objectiveId = GetKeepArtifactObjectiveId(keepId)
            if(objectiveId ~= 0) then
                local text
                local _, artifactType, artifactState = GetObjectiveInfo(keepId, objectiveId, battlegroundContext)
                if(artifactType == OBJECTIVE_ARTIFACT_OFFENSIVE) then
                    text = zo_strformat(SI_TOOLTIP_ARTIFACT_TYPE_OFFENSIVE)
                else
                    text = zo_strformat(SI_TOOLTIP_ARTIFACT_TYPE_DEFENSIVE)
                end
                self.tooltip:AddLine(text, "", ZO_TOOLTIP_DEFAULT_COLOR:UnpackRGB())

                --it's held by the enemy
                if(artifactState ~= OBJECTIVE_CONTROL_STATE_FLAG_AT_BASE) then
                    self.tooltip:AddLine(GetString(SI_TOOLTIP_ARTIFACT_TAKEN), "", KEEP_TOOLTIP_ATTACK_LINE:UnpackRGB())
                end
            end
        end

        --Tel Var Bonus Info
        if(keepType == KEEPTYPE_IMPERIAL_CITY_DISTRICT) then
            local telVarBonusText = GetDistrictTelVarBonusText(keepId, battlegroundContext, alliance)
            if telVarBonusText then
                local finalBonusText = zo_strformat(SI_TOOLTIP_DISTRICT_TEL_VAR_BONUS_TEXT, telVarBonusText, ZO_Currency_GetPlatformFormattedCurrencyIcon(CURT_TELVAR_STONES))
                self.tooltip:AddLine(finalBonusText, "", ZO_TOOLTIP_DEFAULT_COLOR:UnpackRGB())
                self.tooltip:AddLine(DISTRICT_BONUS_RESTRICTION_TEXT, "", ZO_TOOLTIP_DEFAULT_COLOR:UnpackRGB())
            end
        end

        --Keep Capture Bonus Info
        if keepType == KEEPTYPE_KEEP then
            local pointBonusText = GetKeepCaptureBonusText(keepId, battlegroundContext, alliance)
            if pointBonusText then
                local finalBonusText = zo_strformat(SI_TOOLTIP_KEEP_CAPTURE_BONUS_TEXT, pointBonusText, ZO_Currency_GetPlatformFormattedCurrencyIcon(CURT_ALLIANCE_POINTS))
                self.tooltip:AddLine(finalBonusText, "", ZO_TOOLTIP_DEFAULT_COLOR:UnpackRGB())
            end
        end

        local statusText = GetPassableKeepStatusText(keepId, battlegroundContext, keepType)
        if statusText then
            self.tooltip:AddLine(SI_TOOLTIP_KEEP_PASSABLE_STATUS, "", ZO_TOOLTIP_DEFAULT_COLOR:UnpackRGB())
        end

        --Keep Fast Travel Status
        local startingKeep = GetKeepFastTravelInteraction()
        local isUsingKeepRecallStone = WORLD_MAP_MANAGER:IsInMode(MAP_MODE_AVA_KEEP_RECALL)
        if startingKeep or isUsingKeepRecallStone then
            --TODO: AddVerticalSpace(self, 5)
            if keepId == startingKeep then
                self.tooltip:AddLine(GetString(SI_TOOLTIP_KEEP_STARTING_KEEP), "", KEEP_TOOLTIP_AT_KEEP:UnpackRGB())
            else
                local bgContext = ZO_WorldMap_GetBattlegroundQueryType()
                local isKeepAccessible = isUsingKeepRecallStone and GetKeepRecallAvailable(keepId, bgContext) or CanKeepBeFastTravelledTo(keepId, bgContext)

                if isKeepAccessible then
                    self.tooltip:AddLine(GetString(SI_TOOLTIP_KEEP_ACCESSIBLE), KEEP_TOOLTIP_ACCESSIBLE)
                else
                    local playerAlliance = GetUnitAlliance("player")
                    if keepType ~= KEEPTYPE_KEEP and keepType ~= KEEPTYPE_BORDER_KEEP and keepType ~= KEEPTYPE_OUTPOST and keepType ~= KEEPTYPE_TOWN then
                        self.tooltip:AddLine(GetString(SI_TOOLTIP_KEEP_NOT_ACCESSIBLE), "", KEEP_TOOLTIP_NOT_ACCESSIBLE:UnpackRGB() )
                    elseif playerAlliance ~= alliance then
                        self.tooltip:AddLine(GetString(SI_TOOLTIP_KEEP_NOT_ACCESSIBLE_WRONG_OWNER), "", KEEP_TOOLTIP_NOT_ACCESSIBLE:UnpackRGB() )
                    elseif IsKeepTravelBlockedByDaedricArtifact(keepId) then
                        self.tooltip:AddLine(GetString(SI_TOOLTIP_KEEP_NOT_ACCESSIBLE_CARRYING_DAEDRIC_ARTIFACT), "", KEEP_TOOLTIP_NOT_ACCESSIBLE:UnpackRGB() )
                    elseif GetKeepUnderAttack(keepId, bgContext) then
                        self.tooltip:AddLine(GetString(SI_TOOLTIP_KEEP_NOT_ACCESSIBLE_UNDER_ATTACK), "", KEEP_TOOLTIP_NOT_ACCESSIBLE:UnpackRGB() )
                        showUnderAttackLine = false
                    elseif GetKeepUnderAttack(startingKeep, battlegroundContext) then
                        self.tooltip:AddLine(GetString(SI_TOOLTIP_KEEP_STARTING_KEEP_UNDER_ATTACK), "", KEEP_TOOLTIP_NOT_ACCESSIBLE:UnpackRGB() )
                    elseif isUsingKeepRecallStone then
                        local keepRecallUseResult = CanUseKeepRecallStone()
                        self.tooltip:AddLine(GetString("SI_KEEPRECALLSTONEUSERESULT", keepRecallUseResult), "", KEEP_TOOLTIP_NOT_ACCESSIBLE:UnpackRGB() )
                    elseif not GetKeepHasResourcesForTravel(keepId, bgContext) then
                        self.tooltip:AddLine(GetString(SI_TOOLTIP_KEEP_NOT_ACCESSIBLE_RESOURCES), "", KEEP_TOOLTIP_NOT_ACCESSIBLE:UnpackRGB() )
                    elseif not GetKeepHasResourcesForTravel(startingKeep, bgContext) then
                        self.tooltip:AddLine(GetString(SI_TOOLTIP_KEEP_STARTING_KEEP_RESOURCES), "", KEEP_TOOLTIP_NOT_ACCESSIBLE:UnpackRGB() )
                    else
                        self.tooltip:AddLine(GetString(SI_TOOLTIP_KEEP_NOT_ACCESSIBLE_NETWORK), "", KEEP_TOOLTIP_NOT_ACCESSIBLE:UnpackRGB() )
                    end
                end
            end
        end
    end

    --Keep Under Attack
    local showUnderAttackLine = GetHistoricalKeepUnderAttack(keepId, battlegroundContext, historyPercent)
    if showUnderAttackLine then
        self.tooltip:AddLine(GetString(SI_TOOLTIP_KEEP_IN_COMBAT), "", KEEP_TOOLTIP_ATTACK_LINE:UnpackRGB())
    end

    if WORLD_MAP_MANAGER:IsInMode(MAP_MODE_AVA_RESPAWN) and IsLocalBattlegroundContext(battlegroundContext) then
        if CanRespawnAtKeep(keepId) then
            self.tooltip:AddLine(GetString(SI_TOOLTIP_KEEP_RESPAWNABLE), "", KEEP_TOOLTIP_ACCESSIBLE:UnpackRGB())
        else
            self.tooltip:AddLine(GetString(SI_TOOLTIP_KEEP_NOT_RESPAWNABLE), "", KEEP_TOOLTIP_NOT_ACCESSIBLE:UnpackRGB())
        end
    end

    ZO_Tooltip_AddDivider(self.tooltip)
end

local function createActionLine(node, actionLines, interaction, action)
    local actionDesc = node:GetActionDescription(action)
    if not node.known and (action == Nav.ACTION_TRAVEL or action == Nav.ACTION_TRAVELOUTSIDE) and not node.houseId then
        actionDesc = Nav.Utils.StrikethroughString(actionDesc)
    end
    table.insert(actionLines, zo_strformat(GetString(NAVIGATOR_TOOLTIP_ACTION_RESULT), interaction, actionDesc))
end

function Tooltip:AddActions()
    local actions = self.node:GetActions()

    local actionLines = {}
    createActionLine(self.node, actionLines, self.node:GetInteractionName("singleClick"), actions.singleClick)
    if actions.doubleClick and actions.doubleClick ~= actions.singleClick then
        createActionLine(self.node, actionLines, self.node:GetInteractionName("doubleClick"), actions.doubleClick)
    end

    if #actionLines > 0 then
        self.tooltip:AddLine(table.concat(actionLines, "\n"), 'ZoFontGame',  0.7725, 0.7608, 0.6196)
    end
    --if Nav.currentNodeIndex == nil then --Recall
    --    local _, premiumTimeLeft = GetRecallCooldown()
    --    if premiumTimeLeft == 0 then --CLICK: Recall
    --        local text = GetString(nodeIsHousePreview and SI_TOOLTIP_WAYSHRINE_CLICK_TO_PREVIEW_HOUSE or SI_TOOLTIP_WAYSHRINE_CLICK_TO_RECALL)
    --        tooltip:AddLine(text, "", ZO_HIGHLIGHT_TEXT:UnpackRGB())
    --
    --        local cost = GetRecallCost(nodeIndex)
    --        if cost > 0 then
    --            local currency = GetRecallCurrency(nodeIndex)
    --            local notEnoughCurrency = cost > GetCurrencyAmount(currency, CURRENCY_LOCATION_CHARACTER)
    --            tooltip:AddMoney(tooltip, cost, SI_TOOLTIP_RECALL_COST, notEnoughCurrency)
    --        end
    --    else --NO CLICK: Waiting on cooldown
    --        local cooldownText = zo_strformat(SI_TOOLTIP_WAYSHRINE_RECALL_COOLDOWN, ZO_FormatTimeMilliseconds(premiumTimeLeft, TIME_FORMAT_STYLE_DESCRIPTIVE, TIME_FORMAT_PRECISION_SECONDS))
    --        tooltip:AddLine(cooldownText, "", ZO_HIGHLIGHT_TEXT:UnpackRGB())
    --    end
    --else --CLICK: Fast Travel
    --    local text = GetString(nodeIsHousePreview and SI_TOOLTIP_WAYSHRINE_CLICK_TO_PREVIEW_HOUSE or SI_TOOLTIP_WAYSHRINE_CLICK_TO_FAST_TRAVEL)
    --    tooltip:AddLine(text, "", ZO_HIGHLIGHT_TEXT:UnpackRGB())
    --end
end

function Tooltip:Clear()
    self.tooltip:SetHidden(true)
    ClearTooltip(self.tooltip)
    self.tooltip = nil
end

Nav.Tooltip = Tooltip
